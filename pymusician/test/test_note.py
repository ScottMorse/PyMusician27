import unittest
import pymusician as pm

class TestNoteClass(unittest.TestCase):

    def test_A4(self):
        self.assertEqual(pm.A4.getA4(),440)
    
    def test_set_A4(self):
        pm.A4.setA4(442)
        self.assertEqual(pm.A4.getA4(),442)
        self.assertAlmostEqual(pm.Note("A",5).frequency,884)

        with self.assertRaises(ValueError):
            pm.A4.setA4(-1)

        with self.assertRaises(ValueError):
            pm.A4.setA4(0)

        with self.assertRaises(ValueError):
            pm.A4.setA4("440")

    def test_natural_note(self):
        self.assertEqual(pm.Note("A").name,"A")
        self.assertEqual(pm.Note("b").name,"B")
        self.assertEqual(pm.Note("B ").name,"B")
        self.assertEqual(pm.Note("B").name,"B")
        self.assertEqual(pm.Note(" c").name,"C")
        self.assertEqual(pm.Note("C").name,"C")
        self.assertEqual(pm.Note("D").name,"D")
        self.assertEqual(pm.Note("E").name,"E")
        self.assertEqual(pm.Note("F").name,"F")
        self.assertEqual(pm.Note("G").name,"G")
    
        with self.assertRaises(ValueError):
            pm.Note('AA')
        with self.assertRaises(ValueError):
            pm.Note('H')
    
    def test_accidentals(self):
        pm.Note("A#")
        pm.Note("A##")
        pm.Note("Ab")
        pm.Note("Abb")
        pm.Note("B#")
        pm.Note("B##")
        pm.Note("Bb")
        pm.Note("Bbb")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("Bbb")
        pm.Note("G##")
        pm.Note("Fb")
        with self.assertRaises(ValueError):
            pm.Note('Ab#')
        with self.assertRaises(ValueError):
            pm.Note('Eb#')
    
    def test_letter_value(self):
        self.assertEqual(pm.Note("C").letter,0)
        self.assertEqual(pm.Note("C#").letter,0)
        self.assertEqual(pm.Note("Cb").letter,0)
        self.assertEqual(pm.Note("Cbb").letter,0)
        self.assertEqual(pm.Note("C##").letter,0)
        self.assertEqual(pm.Note("D").letter,1)
        self.assertEqual(pm.Note("D#").letter,1)
        self.assertEqual(pm.Note("Db").letter,1)
        self.assertEqual(pm.Note("Dbb").letter,1)
        self.assertEqual(pm.Note("D##").letter,1)
        self.assertEqual(pm.Note("E").letter,2)
        self.assertEqual(pm.Note("E#").letter,2)
        self.assertEqual(pm.Note("Eb").letter,2)
        self.assertEqual(pm.Note("Ebb").letter,2)
        self.assertEqual(pm.Note("E##").letter,2)
        self.assertEqual(pm.Note("F").letter,3)
        self.assertEqual(pm.Note("F#").letter,3)
        self.assertEqual(pm.Note("Fb").letter,3)
        self.assertEqual(pm.Note("Fbb").letter,3)
        self.assertEqual(pm.Note("F##").letter,3)
        self.assertEqual(pm.Note("G").letter,4)
        self.assertEqual(pm.Note("G#").letter,4)
        self.assertEqual(pm.Note("Gb").letter,4)
        self.assertEqual(pm.Note("Gbb").letter,4)
        self.assertEqual(pm.Note("G##").letter,4)
        self.assertEqual(pm.Note("A").letter,5)
        self.assertEqual(pm.Note("A#").letter,5)
        self.assertEqual(pm.Note("Ab").letter,5)
        self.assertEqual(pm.Note("Abb").letter,5)
        self.assertEqual(pm.Note("A##").letter,5)
        self.assertEqual(pm.Note("B").letter,6)
        self.assertEqual(pm.Note("B#").letter,6)
        self.assertEqual(pm.Note("Bb").letter,6)
        self.assertEqual(pm.Note("Bbb").letter,6)
        self.assertEqual(pm.Note("B##").letter,6)
    
    def test_pitch_value(self):
        self.assertEqual(pm.Note("C").pitch,0)
        self.assertEqual(pm.Note("C#").pitch,1)
        self.assertEqual(pm.Note("Cb").pitch,11)
        self.assertEqual(pm.Note("Cbb").pitch,10)
        self.assertEqual(pm.Note("C##").pitch,2)
        self.assertEqual(pm.Note("D").pitch,2)
        self.assertEqual(pm.Note("D#").pitch,3)
        self.assertEqual(pm.Note("Db").pitch,1)
        self.assertEqual(pm.Note("Dbb").pitch,0)
        self.assertEqual(pm.Note("D##").pitch,4)
        self.assertEqual(pm.Note("E").pitch,4)
        self.assertEqual(pm.Note("E#").pitch,5)
        self.assertEqual(pm.Note("Eb").pitch,3)
        self.assertEqual(pm.Note("Ebb").pitch,2)
        self.assertEqual(pm.Note("E##").pitch,6)
        self.assertEqual(pm.Note("F").pitch,5)
        self.assertEqual(pm.Note("F#").pitch,6)
        self.assertEqual(pm.Note("Fb").pitch,4)
        self.assertEqual(pm.Note("Fbb").pitch,3)
        self.assertEqual(pm.Note("F##").pitch,7)
        self.assertEqual(pm.Note("G").pitch,7)
        self.assertEqual(pm.Note("G#").pitch,8)
        self.assertEqual(pm.Note("Gb").pitch,6)
        self.assertEqual(pm.Note("Gbb").pitch,5)
        self.assertEqual(pm.Note("G##").pitch,9)
        self.assertEqual(pm.Note("A").pitch,9)
        self.assertEqual(pm.Note("A#").pitch,10)
        self.assertEqual(pm.Note("Ab").pitch,8)
        self.assertEqual(pm.Note("Abb").pitch,7)
        self.assertEqual(pm.Note("A##").pitch,11)
        self.assertEqual(pm.Note("B").pitch,11)
        self.assertEqual(pm.Note("B#").pitch,0)
        self.assertEqual(pm.Note("Bb").pitch,10)
        self.assertEqual(pm.Note("Bbb").pitch,9)
        self.assertEqual(pm.Note("B##").pitch,1)
    
    def test_octave(self):
        self.assertEqual(pm.Note("C").octave, None)
        self.assertEqual(pm.Note("C",4).octave, 4)
        _note = pm.Note("F")
        _note.octave = 0
        self.assertEqual(_note.octave, 0)
        with self.assertRaises(ValueError):
            pm.Note("C",1.1)
        with self.assertRaises(ValueError):
            pm.Note("C","C")
    
    def test_rhythm_set(self):
        pm.Note("C",4,"0t")
        dot_quarter = pm.Note("D",5,"3.")
        sextuplet = pm.Note("E",2,"5t")
        crazy = pm.Note("Fbbb",-10,"7..t")
        crazy.rhythm = 0
        crazy.rhythm = "3.t"
        with self.assertRaises(ValueError):
            pm.Note("C",1,"4tt")
        with self.assertRaises(ValueError):
            pm.Note("C",1,"11")
        with self.assertRaises(ValueError):
            pm.Note("C",1,"t")
        with self.assertRaises(ValueError):
            pm.Note("C",1,"0t.")
        with self.assertRaises(ValueError):
            pm.Note("C",1,".")
    
    def test_rhythm_val(self):
        pm.Note("C",4,"0t").rhythm

        double_whole = pm.Note("C",2,"0")
        self.assertEqual(double_whole.rhythm.value,1024)

        five_twelth = pm.Note("C",3,"10")
        self.assertEqual(five_twelth.rhythm.value,1)

        dot_quarter = pm.Note("D",5,"3.")
        self.assertEqual(dot_quarter.rhythm.value,192)

        trip_quarter = pm.Note("E",2,"3t")
        self.assertAlmostEqual(trip_quarter.rhythm.value,85.3333333333333)

        self.assertEqual(pm.Note("A",None,"0").rhythm.value,1024)
        self.assertEqual(pm.Note("A",None,"1").rhythm.value,512)
        self.assertEqual(pm.Note("A",None,"2").rhythm.value,256)
        self.assertEqual(pm.Note("A",None,"3").rhythm.value,128)
        self.assertEqual(pm.Note("A",None,"4").rhythm.value,64)
        self.assertEqual(pm.Note("A",None,"5").rhythm.value,32)
        self.assertEqual(pm.Note("A",None,"6").rhythm.value,16)
        self.assertEqual(pm.Note("A",None,"7").rhythm.value,8)
        self.assertEqual(pm.Note("A",None,"8").rhythm.value,4)
        self.assertEqual(pm.Note("A",None,"9").rhythm.value,2)
        self.assertEqual(pm.Note("A",None,"10").rhythm.value,1)

        self.assertEqual(pm.Note("A",None,"0.").rhythm.value,1536)
        self.assertEqual(pm.Note("A",None,"10.").rhythm.value,1.5)
        self.assertAlmostEqual(pm.Note("A",None,"10t").rhythm.value,0.6666666666666)
    
    def test_pitch_offset(self):
        note_As = pm.Note("A#")
        note_C = pm.Note("C")
        note_Gb = pm.Note("Gb")
        note_G = pm.Note("G")
        note_Ess = pm.Note("E##")
        note_Bbb = pm.Note("Bbb")
        note_Dss = pm.Note("D##")
        self.assertEqual(note_As.pitch_offset,1)
        self.assertEqual(note_C.pitch_offset,0)
        self.assertEqual(note_Gb.pitch_offset,-1)
        self.assertEqual(note_G.pitch_offset,0)
        self.assertEqual(note_Ess.pitch_offset,2)
        self.assertEqual(note_Bbb.pitch_offset,-2)
        self.assertEqual(note_Dss.pitch_offset,2)

    def test_hard_pitch(self):
        C0 = pm.Note("C",0)
        C1 = pm.Note("C",1)
        Cn1 = pm.Note("C",-1)
        C4 = pm.Note("C",4)
        B3 = pm.Note("B",3)
        B4 = pm.Note("B",4)
        Db4 = pm.Note("Db",4)
        A4 = pm.Note("A",4)
        self.assertEqual(C0.hard_pitch,0)
        self.assertEqual(C1.hard_pitch,12)
        self.assertEqual(Cn1.hard_pitch,-12)
        self.assertEqual(C4.hard_pitch,48)
        self.assertEqual(B3.hard_pitch,47)
        self.assertEqual(B4.hard_pitch,59)
        self.assertEqual(Db4.hard_pitch,49)
        self.assertEqual(A4.hard_pitch,57)
    
    def test_frequency(self):
        A4 = pm.Note("A",4)
        A3 = pm.Note("A",3)
        A5 = pm.Note("A",5)
        C4 = pm.Note("C",4)
        B3 = pm.Note("B",3)
        B4 = pm.Note("B",4)
        Db4 = pm.Note("Db",4)
        self.assertEqual(A4.frequency,440)
        self.assertEqual(A3.frequency,220)
        self.assertEqual(A5.frequency,880)
        self.assertAlmostEqual(C4.frequency,261.6,1)
        self.assertAlmostEqual(B3.frequency,246.9,1)
        self.assertAlmostEqual(B4.frequency,493.9,1)
        self.assertAlmostEqual(Db4.frequency,277.2,1)

    def test_from_values(self):
        C = pm.Note.from_values(0,0)
        A = pm.Note.from_values(5,9)
        Bs = pm.Note.from_values(6,0)
        Fb = pm.Note.from_values(3,4)
        Gbb = pm.Note.from_values(4,5)
        Asss = pm.Note.from_values(5,0)
        self.assertEqual(C.name,"C")
        self.assertEqual(A.name,"A")
        self.assertEqual(Bs.name,"B#")
        self.assertEqual(Fb.name,"Fb")
        self.assertEqual(Gbb.name,"Gbb")
        self.assertEqual(Asss.name,"A###")

        self.assertEqual(pm.Note.from_values(0,1).name,"C#")
        self.assertEqual(pm.Note.from_values(0,2).name,"C##")
        self.assertEqual(pm.Note.from_values(0,11).name,"Cb")
        self.assertEqual(pm.Note.from_values(0,10).name,"Cbb")
        self.assertEqual(pm.Note.from_values(1,2).name,"D")
        self.assertEqual(pm.Note.from_values(1,3).name,"D#")
        self.assertEqual(pm.Note.from_values(1,4).name,"D##")
        self.assertEqual(pm.Note.from_values(1,1).name,"Db")
        self.assertEqual(pm.Note.from_values(1,0).name,"Dbb")
        self.assertEqual(pm.Note.from_values(2,4).name,"E")
        self.assertEqual(pm.Note.from_values(2,5).name,"E#")
        self.assertEqual(pm.Note.from_values(2,6).name,"E##")
        self.assertEqual(pm.Note.from_values(2,3).name,"Eb")
        self.assertEqual(pm.Note.from_values(2,2).name,"Ebb")
        self.assertEqual(pm.Note.from_values(3,5).name,"F")
        self.assertEqual(pm.Note.from_values(3,6).name,"F#")
        self.assertEqual(pm.Note.from_values(3,7).name,"F##")
        self.assertEqual(pm.Note.from_values(3,4).name,"Fb")
        self.assertEqual(pm.Note.from_values(3,3).name,"Fbb")
        self.assertEqual(pm.Note.from_values(4,7).name,"G")
        self.assertEqual(pm.Note.from_values(4,8).name,"G#")
        self.assertEqual(pm.Note.from_values(4,9).name,"G##")
        self.assertEqual(pm.Note.from_values(4,6).name,"Gb")
        self.assertEqual(pm.Note.from_values(4,5).name,"Gbb")
        self.assertEqual(pm.Note.from_values(5,9).name,"A")
        self.assertEqual(pm.Note.from_values(5,10).name,"A#")
        self.assertEqual(pm.Note.from_values(5,11).name,"A##")
        self.assertEqual(pm.Note.from_values(5,8).name,"Ab")
        self.assertEqual(pm.Note.from_values(5,7).name,"Abb")
        self.assertEqual(pm.Note.from_values(6,11).name,"B")
        self.assertEqual(pm.Note.from_values(6,0).name,"B#")
        self.assertEqual(pm.Note.from_values(6,1).name,"B##")
        self.assertEqual(pm.Note.from_values(6,10).name,"Bb")
        self.assertEqual(pm.Note.from_values(6,9).name,"Bbb")
        
    def test_enharmonic(self):
        C = pm.Note("C")
        Bs = pm.Note("B#")
        E = pm.Note("E")
        Fb = pm.Note("Fb")
        Dss = pm.Note("D##")
        As = pm.Note("A#")
        Bb = pm.Note("Bb")
        Abbb = pm.Note("Abbb")
        self.assertEqual(Bs.enharmonic().name,C.name)
        self.assertEqual(E.enharmonic(None,True).name,Fb.name)
        self.assertEqual(Fb.enharmonic().name,E.name)
        self.assertEqual(Dss.enharmonic().name,E.name)
        self.assertEqual(As.enharmonic().name,Bb.name)
        self.assertEqual(Bb.enharmonic().name,As.name)
        self.assertEqual(As.enharmonic("#").name,"A#")
        self.assertEqual(Bb.enharmonic("b").name,"Bb")
        self.assertEqual(Abbb.enharmonic("#").name,"F#")
        self.assertEqual(Abbb.enharmonic("b").name,"Gb")

    def test_from_hard_pitch(self):
        A4 = pm.Note.from_hard_pitch(57)
        C0 = pm.Note.from_hard_pitch(0)
        C4 = pm.Note.from_hard_pitch(48)
        B3 = pm.Note.from_hard_pitch(47)
        Db4 = pm.Note.from_hard_pitch(49,prefer="b")
        Cs4 = pm.Note.from_hard_pitch(49)
        self.assertEqual(A4.name,"A")
        self.assertEqual(C0.name,"C")
        self.assertEqual(C4.name,"C")
        self.assertEqual(B3.name,"B")
        self.assertEqual(Db4.name,"Db")
        self.assertEqual(Cs4.name,"C#")
        self.assertEqual(A4.octave,4)
        self.assertEqual(C0.octave,0)
        self.assertEqual(C4.octave,4)
        self.assertEqual(B3.octave,3)
        self.assertEqual(Db4.octave,4)
        self.assertEqual(Cs4.octave,4)

    def test_from_frequency(self):
        A4 = pm.Note.from_frequency(440)
        A3 = pm.Note.from_frequency(220)
        A5 = pm.Note.from_frequency(880)
        C4 = pm.Note.from_frequency(261.6)
        B3 = pm.Note.from_frequency(246.9)
        B4 = pm.Note.from_frequency(493.9)
        Db4 = pm.Note.from_frequency(277.2,"b")
        self.assertEqual(A4.name,"A")
        self.assertEqual(A3.name,"A")
        self.assertEqual(A5.name,"A")
        self.assertEqual(C4.name,"C")
        self.assertEqual(B3.name,"B")
        self.assertEqual(B4.name,"B")
        self.assertEqual(Db4.name,"Db")
        self.assertEqual(A4.octave,4)
        self.assertEqual(A3.octave,3)
        self.assertEqual(A5.octave,5)
        self.assertEqual(C4.octave,4)
        self.assertEqual(B3.octave,3)
        self.assertEqual(B4.octave,4)
        self.assertEqual(Db4.octave,4)
    
    def test_repr(self):
        self.assertEqual(repr(pm.Note("E")),'<Note E>')
        self.assertEqual(repr(pm.Note("A#",4,)),'<Note A#4>')
        self.assertEqual(repr(pm.Note("Gbb",3,"4")),'<Note Gbb3:4>')
        self.assertEqual(repr(pm.Note("F#",0,"3.t")),'<Note F#0:3.t>')
        self.assertEqual(repr(pm.Note("B#",3,"5.")),'<Note B#3:5.>')

if __name__ == "__main__":

    unittest.main()